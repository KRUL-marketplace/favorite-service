// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: favorite.proto

package favorite_service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ToggleProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ToggleProductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ToggleProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ToggleProductRequestMultiError, or nil if none found.
func (m *ToggleProductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ToggleProductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for ProductId

	if len(errors) > 0 {
		return ToggleProductRequestMultiError(errors)
	}

	return nil
}

// ToggleProductRequestMultiError is an error wrapping multiple validation
// errors returned by ToggleProductRequest.ValidateAll() if the designated
// constraints aren't met.
type ToggleProductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ToggleProductRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ToggleProductRequestMultiError) AllErrors() []error { return m }

// ToggleProductRequestValidationError is the validation error returned by
// ToggleProductRequest.Validate if the designated constraints aren't met.
type ToggleProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ToggleProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ToggleProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ToggleProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ToggleProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ToggleProductRequestValidationError) ErrorName() string {
	return "ToggleProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ToggleProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sToggleProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ToggleProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ToggleProductRequestValidationError{}

// Validate checks the field values on ToggleProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ToggleProductResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ToggleProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ToggleProductResponseMultiError, or nil if none found.
func (m *ToggleProductResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ToggleProductResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return ToggleProductResponseMultiError(errors)
	}

	return nil
}

// ToggleProductResponseMultiError is an error wrapping multiple validation
// errors returned by ToggleProductResponse.ValidateAll() if the designated
// constraints aren't met.
type ToggleProductResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ToggleProductResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ToggleProductResponseMultiError) AllErrors() []error { return m }

// ToggleProductResponseValidationError is the validation error returned by
// ToggleProductResponse.Validate if the designated constraints aren't met.
type ToggleProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ToggleProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ToggleProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ToggleProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ToggleProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ToggleProductResponseValidationError) ErrorName() string {
	return "ToggleProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ToggleProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sToggleProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ToggleProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ToggleProductResponseValidationError{}

// Validate checks the field values on GetFavoriteListByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFavoriteListByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFavoriteListByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFavoriteListByIdRequestMultiError, or nil if none found.
func (m *GetFavoriteListByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFavoriteListByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetFavoriteListByIdRequestMultiError(errors)
	}

	return nil
}

// GetFavoriteListByIdRequestMultiError is an error wrapping multiple
// validation errors returned by GetFavoriteListByIdRequest.ValidateAll() if
// the designated constraints aren't met.
type GetFavoriteListByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFavoriteListByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFavoriteListByIdRequestMultiError) AllErrors() []error { return m }

// GetFavoriteListByIdRequestValidationError is the validation error returned
// by GetFavoriteListByIdRequest.Validate if the designated constraints aren't met.
type GetFavoriteListByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFavoriteListByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFavoriteListByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFavoriteListByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFavoriteListByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFavoriteListByIdRequestValidationError) ErrorName() string {
	return "GetFavoriteListByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFavoriteListByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFavoriteListByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFavoriteListByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFavoriteListByIdRequestValidationError{}

// Validate checks the field values on GetFavoriteListByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFavoriteListByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFavoriteListByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFavoriteListByIdResponseMultiError, or nil if none found.
func (m *GetFavoriteListByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFavoriteListByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFavoriteList()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFavoriteListByIdResponseValidationError{
					field:  "FavoriteList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFavoriteListByIdResponseValidationError{
					field:  "FavoriteList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFavoriteList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFavoriteListByIdResponseValidationError{
				field:  "FavoriteList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFavoriteListByIdResponseMultiError(errors)
	}

	return nil
}

// GetFavoriteListByIdResponseMultiError is an error wrapping multiple
// validation errors returned by GetFavoriteListByIdResponse.ValidateAll() if
// the designated constraints aren't met.
type GetFavoriteListByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFavoriteListByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFavoriteListByIdResponseMultiError) AllErrors() []error { return m }

// GetFavoriteListByIdResponseValidationError is the validation error returned
// by GetFavoriteListByIdResponse.Validate if the designated constraints
// aren't met.
type GetFavoriteListByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFavoriteListByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFavoriteListByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFavoriteListByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFavoriteListByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFavoriteListByIdResponseValidationError) ErrorName() string {
	return "GetFavoriteListByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFavoriteListByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFavoriteListByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFavoriteListByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFavoriteListByIdResponseValidationError{}

// Validate checks the field values on FavoriteList with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FavoriteList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FavoriteList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FavoriteListMultiError, or
// nil if none found.
func (m *FavoriteList) ValidateAll() error {
	return m.validate(true)
}

func (m *FavoriteList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FavoriteListId

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FavoriteListValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FavoriteListValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FavoriteListValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FavoriteListValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FavoriteListValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FavoriteListValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FavoriteListValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FavoriteListValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FavoriteListValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FavoriteListMultiError(errors)
	}

	return nil
}

// FavoriteListMultiError is an error wrapping multiple validation errors
// returned by FavoriteList.ValidateAll() if the designated constraints aren't met.
type FavoriteListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FavoriteListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FavoriteListMultiError) AllErrors() []error { return m }

// FavoriteListValidationError is the validation error returned by
// FavoriteList.Validate if the designated constraints aren't met.
type FavoriteListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FavoriteListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FavoriteListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FavoriteListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FavoriteListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FavoriteListValidationError) ErrorName() string { return "FavoriteListValidationError" }

// Error satisfies the builtin error interface
func (e FavoriteListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFavoriteList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FavoriteListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FavoriteListValidationError{}

// Validate checks the field values on FavoriteItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FavoriteItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FavoriteItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FavoriteItemMultiError, or
// nil if none found.
func (m *FavoriteItem) ValidateAll() error {
	return m.validate(true)
}

func (m *FavoriteItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ItemId

	// no validation rules for ProductId

	if all {
		switch v := interface{}(m.GetProductInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FavoriteItemValidationError{
					field:  "ProductInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FavoriteItemValidationError{
					field:  "ProductInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProductInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FavoriteItemValidationError{
				field:  "ProductInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FavoriteItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FavoriteItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FavoriteItemValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FavoriteItemValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FavoriteItemValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FavoriteItemValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FavoriteItemMultiError(errors)
	}

	return nil
}

// FavoriteItemMultiError is an error wrapping multiple validation errors
// returned by FavoriteItem.ValidateAll() if the designated constraints aren't met.
type FavoriteItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FavoriteItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FavoriteItemMultiError) AllErrors() []error { return m }

// FavoriteItemValidationError is the validation error returned by
// FavoriteItem.Validate if the designated constraints aren't met.
type FavoriteItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FavoriteItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FavoriteItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FavoriteItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FavoriteItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FavoriteItemValidationError) ErrorName() string { return "FavoriteItemValidationError" }

// Error satisfies the builtin error interface
func (e FavoriteItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFavoriteItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FavoriteItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FavoriteItemValidationError{}

// Validate checks the field values on FavoriteProductInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FavoriteProductInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FavoriteProductInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FavoriteProductInfoMultiError, or nil if none found.
func (m *FavoriteProductInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *FavoriteProductInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Slug

	// no validation rules for Image

	// no validation rules for Price

	if all {
		switch v := interface{}(m.GetBrand()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FavoriteProductInfoValidationError{
					field:  "Brand",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FavoriteProductInfoValidationError{
					field:  "Brand",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBrand()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FavoriteProductInfoValidationError{
				field:  "Brand",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FavoriteProductInfoMultiError(errors)
	}

	return nil
}

// FavoriteProductInfoMultiError is an error wrapping multiple validation
// errors returned by FavoriteProductInfo.ValidateAll() if the designated
// constraints aren't met.
type FavoriteProductInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FavoriteProductInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FavoriteProductInfoMultiError) AllErrors() []error { return m }

// FavoriteProductInfoValidationError is the validation error returned by
// FavoriteProductInfo.Validate if the designated constraints aren't met.
type FavoriteProductInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FavoriteProductInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FavoriteProductInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FavoriteProductInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FavoriteProductInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FavoriteProductInfoValidationError) ErrorName() string {
	return "FavoriteProductInfoValidationError"
}

// Error satisfies the builtin error interface
func (e FavoriteProductInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFavoriteProductInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FavoriteProductInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FavoriteProductInfoValidationError{}

// Validate checks the field values on Brand with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Brand) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Brand with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BrandMultiError, or nil if none found.
func (m *Brand) ValidateAll() error {
	return m.validate(true)
}

func (m *Brand) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BrandValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BrandValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BrandValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BrandValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BrandValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BrandValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BrandValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BrandValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BrandValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BrandMultiError(errors)
	}

	return nil
}

// BrandMultiError is an error wrapping multiple validation errors returned by
// Brand.ValidateAll() if the designated constraints aren't met.
type BrandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BrandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BrandMultiError) AllErrors() []error { return m }

// BrandValidationError is the validation error returned by Brand.Validate if
// the designated constraints aren't met.
type BrandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BrandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BrandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BrandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BrandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BrandValidationError) ErrorName() string { return "BrandValidationError" }

// Error satisfies the builtin error interface
func (e BrandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBrand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BrandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BrandValidationError{}

// Validate checks the field values on BrandInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BrandInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BrandInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BrandInfoMultiError, or nil
// if none found.
func (m *BrandInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *BrandInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Slug

	// no validation rules for Description

	if len(errors) > 0 {
		return BrandInfoMultiError(errors)
	}

	return nil
}

// BrandInfoMultiError is an error wrapping multiple validation errors returned
// by BrandInfo.ValidateAll() if the designated constraints aren't met.
type BrandInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BrandInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BrandInfoMultiError) AllErrors() []error { return m }

// BrandInfoValidationError is the validation error returned by
// BrandInfo.Validate if the designated constraints aren't met.
type BrandInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BrandInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BrandInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BrandInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BrandInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BrandInfoValidationError) ErrorName() string { return "BrandInfoValidationError" }

// Error satisfies the builtin error interface
func (e BrandInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBrandInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BrandInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BrandInfoValidationError{}
